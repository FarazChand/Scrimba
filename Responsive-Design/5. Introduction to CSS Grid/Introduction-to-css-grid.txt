Introduction to CSS Grid
========================
- Flexbox is great, but it does have its limitations. Only deals with 1 dimension at a time
- if we have a flex-direction:row, we get columns, we're working on the horizontal dimension
- if we have a flex-direction:column, we get rows, we're working on the vertical dimension
- if we want rows and colums, we need extra markup in order to create rows, which inside of we have flex items


Enter CSS Grid:
---------------
- enables us to create a grid
- can work on both the vertical and horizontal axis at the same time
- the parent div can be split up into rows and columns
- this makes some complicated layouts a lot easier to pull off
- this allows us to simplify our markup
- we don't have to think about how content needs to be grouped, resulting in a much flatter HTML

Note:
- it does simplify the markup, but also comes with added complexity
- there are A LOT of new properties to learn as well as a new unit
- though it is more complex than flexbox, it is totally worth knowing how to use grid and have it as a tool on your belt


Setting up a Basic Grid:
------------------------
- first step is display:grid; on the parent element
- creates a new grid formatting context
- similar to how we display:flex
- margins no longer collapse and direct children become grid items
- similar to flexbox, once a grid container is created, its children will fall into the grid
- however, they don't become columns right away like in flexbox, the only change we really see instantly is that margins no longer collapse


To properly use CSS Grid, we need to define our rows and columns:
- flexbox only deals with one dimension, so we don't have to worry about rows and columns, we just switch flex-direction when needed
- with grid, we have both. We can explicitly create them and then place items within  the grid that we have created


Template rows and columns:
--------------------------
e.g. grid-template-columns: 200px 200px 300px;
- takes the parent, divides it into 3 columns with the above stated dimensions (width)
- anytime you are defining columns, you are defining the width of the columns

eg. grid-template-rows: 50px 200px;
- takes the parent, divides it into 2 rows with the above stated dimension (height)
- anytime you are defining rows your are difining the width of the rows

- once templated, content will automatically flow into their column, once all columns on the first row are filled, they will flow into the next row with the same dimensions

There is a short hand where you can define both at the same time:
eg grid-template: 100px 400px / 250px 250px 250px  (rows/columns)


Placing Items on the Grid:
--------------------------
- content will place itself automatically on the gird
- however, we can explicitly place items where we want them to be
- we can tell grid items exactly where they live  within their parent's grid with the following properties:
	-> grid-column-start
	-> grid-column-end
	-> grid-row-start
	-> grid-row-end

- used on the grid-item, not the parent
- the grid itself is made of column lines and row lines, each having their own number (look at a picture to understand better)
- when we want to place items, we use these line numbers to tell them where to go
- we tell them where to start and end
- cant have an L shape or weird shapes, can only be rectangular


Grid-row and Grid-column shorthands:
------------------------------------
e.g. (replace words with column/row number)

grid-row: start/end
grid-column: start/end 

- much better to do it this way for readability and ease of life

We can also tell our items how far to span instead of defining the grid lines:
eg. 
instead of	grid-column: 1/3;
we can do	grid-column: span 2;	same thing, depends what you wanna do

eg.
instead of	grid-column: 2 / 4;	
we can do	grid-column: 2 / span 2;	same thing

- works on rows too
- depending on the circumstances, can be easier than counting column numbers

if you only want the item spaning one column/row, you can just use a single number to indicate where to start, and it will assume its spanning one row
eg.
grid-column: 2/3; 	is the same thing as 	grid-column: 2;


Notes:
- grid items will try not to overlap but if you explicitly tell them to do so, they will
- you can use negative numbers to define the grid lines (-1 is the last grid line - this number is used the most)
- images are weird, even when you define their grid lines, they wont occupy them properly
	-> in order to fix this you must define their width and height at 100%
	-> this doesn't mean 100% of their parent in this context, rather, 100% of the grid cell you've defined through gird lines
- you can create padding by adding a column/row of that padding width in the location of where its needed, can be useful for more complicated layouts (not sure why yet)
	-> useful for flattening out our layout and avoiding certain things


Some Similarities to flexbox:
-----------------------------
- when defining our rows (and sometimes our columns), we don't want to set an exact height, we just want it to match the content
- we can do that by using the auto keyword
- when we do this, the height of the row will be dictated by the grid item with the largest height
- if we don't declare a grid-template-row or if we have more rows than we have defined, they will default to auto
- this is a good thing, and the behaviour that we want most of the time
- like flex items, grid items stretch by default

Align items:
- just like flexbox, our grid container has a property called align-items
- instead of flex-start or flex-end, its just start and end, works the same as flexbox (shrinks content to natural size and aligns)
- we also have center and baseline for this property as well

Justify items:
- grids stretch vertically to match the height of the tallest item, but they also stretch horizontally to match the width of the column that they're inside of
- if we don't want them to do that, we can use items justify-items property on the parent
- has the same values as align items, but behaves on the horizontal axis

You can do these on individual grid items as well, like how flexbox has align-self
- align-self:
- justify-self:
- both of these have the same values available as justify items and align items


The grid-gap property:
----------------------
- can add gaps between rows and columns with:
	-> grid-column-gap
	-> grid-row-gap
	-> grid-gap (short hand)  first number is rows, second is columns. if only one number then it is both
- does not put a gap on the outside, only puts a gap inbetween rows/columns
	-> in order to do this you need to create empty rows/columns where you want there to be space on the outside
-grid-gap property is being replaced by gap, but it is only supported by firefox rn
	-> will work for both flexbox and grid
